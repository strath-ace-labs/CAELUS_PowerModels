from PowerModels.DemandSchedule.demand_schedule import balance_time, demand_schedule, charge_prof
from PowerModels.DemandSchedule.batt_chg import batt_chg
from data import charge_prof_validation
from math import isclose

flatten = lambda a: [x for xs in a for x in xs]

def test_balance_time():
    invariance = [2020, 10, 6, 13, 40, 22]
    all_overflow = [2020, 12, 31, 23, 59, 60]
    all_overflow_expected = [2021, 1, 1, 00, 00, 00]
    seconds_big_overflow = [2020, 12, 31, 23, 59, 120] 
    seconds_big_overflow_expected = [2021, 1, 1, 00, 1, 00] # overflow + 1 minute
    assert balance_time(invariance) == invariance
    assert balance_time(all_overflow) == all_overflow_expected
    assert balance_time(seconds_big_overflow) == seconds_big_overflow_expected

def test_charge_prof():
    result = [row[0]+row[1:] for row in charge_prof([2021, 8, 17, 00, 00, 00], 60, 1)]
    validation = [row[0]+row[1:] for row in charge_prof_validation]
    assert all([isclose(a,b, rel_tol=1e-2) for a,b in zip(flatten(result), flatten(validation))])

def test_batt_chg():
    assert round(batt_chg(100, 100, 100),4) == 385.1231

def test_demand_schedule():
    landings = [
        [[2021, 8, 17, 00, 00, 00], 60, 1],
        [[2021, 8, 17, 1, 00, 00], 60, 1],
        [[2021, 8, 17, 2, 00, 00], 99, 1],
        [[2021, 8, 17, 3, 00, 00], 20, 2],
        [[2021, 8, 17, 4, 00, 00], 90, 1],
        [[2021, 8, 17, 5, 00, 00], 50, 2],
        [[2021, 8, 17, 6, 00, 00], 30, 1],
        [[2021, 8, 17, 7, 00, 00], 10, 1],
        [[2021, 8, 17, 8, 00, 00], 90, 1],
        [[2021, 8, 17, 9, 00, 00], 80, 2],
        [[2021, 8, 17, 10, 00, 00], 50, 1],
        [[2021, 8, 17, 11, 00, 00], 10, 0.5],
        [[2021, 8, 17, 12, 00, 00], 60, 1],
        [[2021, 8, 17, 13, 00, 00], 60, 1],
        [[2021, 8, 17, 14, 00, 00], 99, 1],
        [[2021, 8, 17, 15, 00, 00], 20, 2],
        [[2021, 8, 17, 16, 00, 00], 90, 1],
        [[2021, 8, 17, 17, 00, 00], 50, 2],
        [[2021, 8, 17, 18, 00, 00], 30, 1],
        [[2021, 8, 17, 19, 00, 00], 10, 1],
        [[2021, 8, 17, 20, 00, 00], 90, 1],
        [[2021, 8, 17, 21, 00, 00], 80, 2],
        [[2021, 8, 17, 22, 00, 00], 50, 1],
        [[2021, 8, 17, 23, 00, 00], 10, 0.5]
    ]

    expected_output = list(map(lambda lst: [round(l, 4) for l in lst], [
        [0, 7379.97418753600, 13305.6000000000,8046.88495524873],
        [1, 7379.97418753600, 13305.6000000000,7725.28493391784],
        [2, 8397.89755430285, 12751.2000000000,11716.0018395365],
        [3, 5130.20747616056, 23839.2000000000,2404.21027146520],
        [4, 7148.11850343151, 11088.0000000000,9805.14168705097],
        [5, 8839.29469271797, 21621.6000000000,5186.28331655478],
        [6, 3943.76516278075, 9979.20000000000,3124.33840118074],
        [7, 1870.08224588755, 9424.80000000000,1107.50426339785],
        [8, 5718.49480274521, 8870.40000000000,7844.11334964077],
        [9, 9008.96364518711, 17186.4000000000,6555.50306238163],
        [10, 3976.12285562542, 7761.60000000000,3945.19745563722],
        [11, 1241.91243115844, 3603.60000000000,824.836839694399],
        [12, 3689.98709376800, 6652.80000000000,4023.44247762437],
        [13, 3689.98709376800, 6652.80000000000,3694.99903039124],
        [14, 3984.95284712711, 6098.40000000000,5325.76644642124],
        [15, 2408.80057107718, 10533.6000000000,1037.87929458988],
        [16, 2859.24740137260, 4435.20000000000,3922.05667482039],
        [17, 3482.31231321498, 8316.00000000000,1915.36630843084],
        [18, 1314.58838759358, 3326.40000000000,1041.44613372692],
        [19, 550.024189966925, 2772.00000000000,325.736548058190],
        [20, 1429.62370068630, 2217.60000000000,1961.02833741019],
        [21, 2087.71746917468, 3880.80000000000,1316.96572209650],
        [22, 568.017550803631, 1108.80000000000,563.599636519603],
        [23, 95.5317254737262, 277.200000000000,63.4489876687999]
    ]))
    
    assert all([isclose(a,b, rel_tol=1e-2) for a,b in zip(
        flatten([[round(l,4) for l in lst] for lst in demand_schedule(landings)]),
        flatten(expected_output))])